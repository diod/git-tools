#!/usr/bin/env python
# -*- mode:python -*-
# Copyright (c) 2016 Primiano Tucci -- www.primianotucci.com
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * The name of Primiano Tucci may not be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import argparse
import getpass
import os
import subprocess
import sys
import tempfile
import time

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive

GDRIVE_DIR_NAME = 'git-drive'
DIR_TYPE = 'application/vnd.google-apps.folder'
CUR_DIR = os.path.dirname(os.path.realpath(__file__))
CLIENT_CONFIG = {
  'client_id': '857140522958-5dhpnfms5eguvcj8052o8bmf6f8uguj7.apps.googleusercontent.com',
  'client_secret': '21qRCbYlu3g4SF59MalgGx1o',  # Please keep it secret :-)
  'auth_uri': 'https://accounts.google.com/o/oauth2/auth',
  'redirect_uri': 'urn:ietf:wg:oauth:2.0:oob',
  'revoke_uri': '',
  'token_uri': 'https://accounts.google.com/o/oauth2/token',
}
CLIENT_CONFIG['client_secret'] = CLIENT_CONFIG['client_secret'][::-1]


def authorize(force_auth):
  credentials_file = os.path.expanduser('~/.git-gdrive.credentials')
  gauth = GoogleAuth()
  gauth.settings['oauth_scope'] = 'https://www.googleapis.com/auth/drive.file'
  gauth.settings['get_refresh_token'] = True
  gauth.settings['client_config'] = CLIENT_CONFIG
  gauth.LoadClientConfigSettings()
  if not force_auth:
    gauth.LoadCredentialsFile(credentials_file)
  if gauth.credentials is None:
    gauth.CommandLineAuth()
  elif gauth.access_token_expired:
    gauth.Refresh()
  else:
    gauth.Authorize()
  gauth.SaveCredentialsFile(credentials_file)
  return gauth

def get_or_create_gdrive_dir(gdrive):
  query = r'"root" in parents and trashed=false and mimeType="%s"' % DIR_TYPE
  fileobj = None
  file_list = gdrive.ListFile({'q': query}).GetList()
  for entry in file_list:
    if entry['title'] == GDRIVE_DIR_NAME:
      fileobj = entry
      break
  if fileobj is None:
    fileobj = gdrive.CreateFile({'title': GDRIVE_DIR_NAME, 'mimeType': DIR_TYPE})
    fileobj.Upload()
  return fileobj

def main():
  ALLOWED_COMMANDS = 'auth | pull | push <optional revlist>'
  parser = argparse.ArgumentParser(
      description='Push/Pull patchsets to GDrive',
      usage='%(prog)s ' + ALLOWED_COMMANDS)
  parser.add_argument('command', help=ALLOWED_COMMANDS)
  args, extra_args = parser.parse_known_args()

  force_auth = args.command == 'auth'
  gauth = authorize(force_auth)
  if not gauth:
    return 1;
  gdrive = GoogleDrive(gauth)
  gdrive_dir = get_or_create_gdrive_dir(gdrive)

  if args.command == 'push':
    rev_range = extra_args or ['@{upstream}']
    cmd = ['git', 'format-patch', '--stdout'] + rev_range
    patch = subprocess.check_output(cmd)
    cur_branch_name = subprocess.check_output(['git', 'rev-parse',  '--abbrev-ref', 'HEAD']).strip()
    now = time.strftime('%Y-%m-%d_%H-%M')
    title = '%s-%s-%s.patch' % (getpass.getuser(), cur_branch_name, now)
    print 'Uploading /%s/%s' % (GDRIVE_DIR_NAME, title)
    patchfile = gdrive.CreateFile({'title': title,
                                   'parents': [{'id': gdrive_dir['id']}],
                                   'mimeType': 'text/plain'})
    patchfile.SetContentString(patch)
    patchfile.Upload()

  elif args.command == 'pull':
    query = r'"%s" in parents and trashed=false' % gdrive_dir['id']
    file_list = gdrive.ListFile({'q': query,
                                 'orderBy':'modifiedDate desc',
                                 'maxResults': 20}).GetList()
    if not file_list:
      print 'There are no files in GDrive. Do a git gdrive push first'
      return 1
    for num, entry in enumerate(file_list):
      print '[%-2d] %s' % (num, entry['title'])
    file_to_pull = raw_input('Enter id or file name (Press enter for [0]): ')
    file_to_pull = file_to_pull or '0'
    if file_to_pull.isdigit():
      file_to_pull = file_list[int(file_to_pull)]
    print 'Pulling /%s/%s' % (GDRIVE_DIR_NAME, file_to_pull['title'])
    tmp_path = os.path.join(tempfile.gettempdir(), file_to_pull['title'])
    patch_content = file_to_pull.GetContentFile(tmp_path)
    cmd = ['git', 'am', '-3', tmp_path]
    print 'Running', ' '.join(cmd)
    subprocess.check_output(cmd)
    os.unlink(tmp_path)


if __name__ == '__main__':
  sys.exit(main())
